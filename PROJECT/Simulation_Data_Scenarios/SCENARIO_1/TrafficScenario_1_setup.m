function [allData, scenario, sensors] = TrafficScenario_1_setup()
%TrafficScenario_1_setup - Returns sensor detections
%    allData = TrafficScenario_1_setup returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = TrafficScenario_1_setup optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.4 and Automated Driving System Toolbox 1.2.
% Generated on: 06-Sep-2020 16:25:59

% Create the drivingScenario object and ego car
[scenario, egoCar] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego car
    poses = targetPoses(egoCar);
    % Generate the boundaries of all lanes relative to the ego car for 100m
    lanes = laneBoundaries(egoCar, 'XDistance', 100);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    isValidTime      = false(1, numSensors);
    isValidLaneTime  = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        type = getDetectorOutput(sensors{sensorIndex});
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensors{sensorIndex}(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensors{sensorIndex}(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections',   {laneDetections}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [1.9 0], ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 924]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 924]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -60, ...
    'MaxRange', 70, ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 1108]), ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [0 -0.9], ...
    'Yaw', -120, ...
    'MaxRange', 70, ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 1108]), ...
    'ActorProfiles', profiles);
sensors{5} = visionDetectionGenerator('SensorIndex', 5, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [1.38 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 70, ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 1108]), ...
    'ActorProfiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 60, ...
    'MaxRange', 70, ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 1108]), ...
    'ActorProfiles', profiles);
sensors{7} = visionDetectionGenerator('SensorIndex', 7, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [0 0.9], ...
    'Yaw', 120, ...
    'MaxRange', 70, ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 1108]), ...
    'ActorProfiles', profiles);
sensors{8} = visionDetectionGenerator('SensorIndex', 8, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [1.44 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 70, ...
    'DetectionProbability', 0.999, ...
    'HasNoise', false, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'FalsePositivesPerImage', 0.001, ...
    'BoundingBoxAccuracy', 2, ...
    'ProcessNoiseIntensity', 2, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 1108]), ...
    'ActorProfiles', profiles);
sensors{9} = radarDetectionGenerator('SensorIndex', 9, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 200, ...
    'DetectionProbability', 0.99, ...
    'HasNoise', false, ...
    'MaxNumDetectionsSource', 'Property', ...
    'MaxNumDetections', 200, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasElevation', true, ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [30 5], ...
    'ActorProfiles', profiles);
sensors{10} = radarDetectionGenerator('SensorIndex', 10, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [3.7 -0.9], ...
    'Yaw', -45, ...
    'MaxRange', 100, ...
    'DetectionProbability', 0.99, ...
    'HasNoise', false, ...
    'MaxNumDetectionsSource', 'Property', ...
    'MaxNumDetections', 200, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasElevation', true, ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [100 5], ...
    'ActorProfiles', profiles);
sensors{11} = radarDetectionGenerator('SensorIndex', 11, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [-1 -0.9], ...
    'Yaw', -135, ...
    'MaxRange', 100, ...
    'DetectionProbability', 0.99, ...
    'HasNoise', false, ...
    'MaxNumDetectionsSource', 'Property', ...
    'MaxNumDetections', 200, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [100 5], ...
    'ActorProfiles', profiles);
sensors{12} = radarDetectionGenerator('SensorIndex', 12, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectionProbability', 0.99, ...
    'HasNoise', false, ...
    'MaxNumDetectionsSource', 'Property', ...
    'MaxNumDetections', 200, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasElevation', true, ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [100 5], ...
    'ActorProfiles', profiles);
sensors{13} = radarDetectionGenerator('SensorIndex', 13, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [-1 0.9], ...
    'Yaw', 135, ...
    'MaxRange', 100, ...
    'HasNoise', false, ...
    'MaxNumDetectionsSource', 'Property', ...
    'MaxNumDetections', 200, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasElevation', true, ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [100 5], ...
    'ActorProfiles', profiles);
sensors{14} = radarDetectionGenerator('SensorIndex', 14, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [3.7 0.9], ...
    'Yaw', 45, ...
    'MaxRange', 100, ...
    'HasNoise', false, ...
    'MaxNumDetectionsSource', 'Property', ...
    'MaxNumDetections', 200, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasElevation', true, ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [100 5], ...
    'ActorProfiles', profiles);
numSensors = 14;

function [scenario, egoCar] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [19.34 54.38 0;
    21.34 -148.62 0;
    21.34 -350.62 0;
    4.33999999999999 -538.62 0;
    -49.66 -719.62 0;
    -185.66 -890.62 0;
    -366.66 -998.62 0];
laneSpecification = lanespec(3, 'Width', 3.95);
road(scenario, roadCenters, 'Lanes', laneSpecification);

% Add the ego car
egoCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [20.4 -45.8 0]);
waypoints = [20.2 -47.8 0;
    20.2 -58.9 0;
    20.4 -73.8 0;
    20.6 -95.5999999999999 0;
    20.7 -120.4 0;
    21.2 -154.4 0;
    21.4 -183.6 0;
    21.6 -205.3 0;
    22 -254 0;
    21.6 -316.4 0;
    20.5 -367.9 0;
    17.9 -416 0;
    13.4 -469.4 0;
    9.5 -503.5 0;
    -1 -568 0;
    -14.8 -625.7 0;
    -26.2 -662 0;
    -44.7 -709.2 0;
    -66 -750.7 0;
    -89.8 -788 0;
    -111 -816 0;
    -145.1 -854.2 0;
    -182.8 -888.6 0;
    -215.9 -913.5 0;
    -283.8 -955.9 0;
    -320.4 -974.9 0;
    -358.5 -994.3 0];
speed = 50;
trajectory(egoCar, waypoints, speed);

% Add the non-ego actors
tV1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [15.4 49.6 0]);
waypoints = [15.4 49.6 0;
    15.8 2 0;
    16 -56.6 0;
    16.8 -117.4 0;
    17.3 -138.3 0;
    18 -183.4 0;
    18.2 -233.7 0;
    18.3 -272.3 0;
    18 -325.4 0;
    16.7 -361.4 0;
    15 -403 0;
    12 -445.8 0;
    8.9 -476.7 0;
    2.9 -521.1 0;
    -1.8 -550.3 0;
    -9.6 -589.2 0;
    -19.1 -625.7 0;
    -25.3 -647.1 0;
    -33.1 -670.5 0;
    -46 -702.7 0;
    -54.7 -720.5 0;
    -66.2 -741.7 0;
    -81.6 -768.1 0;
    -98.4 -793 0;
    -117.4 -817.7 0;
    -132.8 -835 0;
    -157.3 -860.7 0;
    -183.5 -883.6 0;
    -207.7 -902.6 0;
    -229.3 -917.4 0;
    -273.2 -944.7 0;
    -304.3 -961.7 0;
    -363.7 -992.6 0];
speed = 60;
trajectory(tV1, waypoints, speed);

tV2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [24.5 -69.9 0]);
waypoints = [24.5 -69.9 0;
    24.7 -95.4 0;
    25.2 -147.3 0;
    26.2 -226.7 0;
    26.6 -294.8 0;
    25.2 -350 0;
    22.5 -410.8 0;
    18.8 -459.1 0;
    12.8 -508.4 0;
    5.9 -550.6 0;
    -2.1 -592.1 0;
    -11.2 -627.4 0;
    -21.7 -661.4 0;
    -35.2 -697 0;
    -46.1 -720.8 0;
    -53.6 -735.5 0;
    -70.9 -765.6 0;
    -89.2 -793.6 0;
    -101.3 -809.7 0;
    -122.2 -834.8 0;
    -136.6 -850.7 0;
    -155.6 -869.2 0;
    -168.2 -881.1 0;
    -188.8 -897.8 0;
    -218.2 -919.6 0;
    -236.5 -932 0;
    -268.9 -951.4 0;
    -299 -968.1 0;
    -327.8 -983.3 0;
    -348.7 -993.2 0;
    -361.6 -1000.2 0];
speed = 52;
trajectory(tV2, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
else
    output = 'Objects only';
end

